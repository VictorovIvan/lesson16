package jdbc;

import object.Role;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * Class RoleJDBC
 */
public class RoleJDBC {
    private Connection connectDataBase;

    /**
     * Constructor RoleJDBC
     * @param connectDataBase Creates a Statement object for sending SQL statements to the database.
     */
    public RoleJDBC(Connection connectDataBase) {
        this.connectDataBase = connectDataBase;
    }

    /**
     * Insert object Role to database ROLE with parametric query
     *
     * @param role Object role
     */
    public void addRoleParametric(Role role) throws SQLException {
        if (role.name.equals(Role.enumName.Administration)) {
            PreparedStatement prepStatement = connectDataBase.prepareStatement("INSERT INTO \"public\".\"ROLE\" VALUES (?, 'Administration', ?)");
            handlerPrepareStatement(prepStatement, role);
        } else {
            if (role.name.equals(Role.enumName.Clients)) {
                PreparedStatement prepStatement = connectDataBase.prepareStatement("INSERT INTO \"public\".\"ROLE\" VALUES (?, 'Clients', ?)");
                handlerPrepareStatement(prepStatement, role);
            } else {
                PreparedStatement prepStatement = connectDataBase.prepareStatement("INSERT INTO \"public\".\"ROLE\" VALUES (?, 'Billing', ?)");
                handlerPrepareStatement(prepStatement, role);
            }
        }
    }

    /**
     * Handler for parametric id and description
     *
     * @param prepHandlerStatement Executes the SQL query in this PreparedStatement. object and returns the ResultSet object generated by the query.
     * @param roleHandler          Object role
     * @throws SQLException An exception that provides information on a database access error or other errors.
     */
    private void handlerPrepareStatement(PreparedStatement prepHandlerStatement, Role roleHandler) throws SQLException {
        prepHandlerStatement.setInt(1, roleHandler.id);
        prepHandlerStatement.setString(2, roleHandler.description);
        prepHandlerStatement.executeUpdate();
    }

    /**
     * Insert object Role to database ROLE with batch
     * @param role Object role
     * @throws SQLException An exception that provides information on a database access error or other errors.
     */
    public void addRoleBatch(Role role) throws SQLException {
        if (role.name.equals(Role.enumName.Administration)) {
            PreparedStatement preparedStatement = connectDataBase.prepareStatement("INSERT INTO \"public\".\"ROLE\" VALUES (?, 'Administration', ?)");
            handlerBatch(role,preparedStatement);
        } else {
            if (role.name.equals(Role.enumName.Clients)) {
                PreparedStatement preparedStatement = connectDataBase.prepareStatement("INSERT INTO \"public\".\"ROLE\" VALUES (?, 'Clients', ?)");
                handlerBatch(role,preparedStatement);
            } else {
                PreparedStatement preparedStatement = connectDataBase.prepareStatement("INSERT INTO \"public\".\"ROLE\" VALUES (?, 'Billing', ?)");
                handlerBatch(role,preparedStatement);
            }
        }
    }

    /**
     * Handler for batch
     * @param someRole Object role
     * @param preparedStatementBatch Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query.
     * @throws SQLException  An exception that provides information on a database access error or other errors.
     */
    private void handlerBatch(Role someRole, PreparedStatement preparedStatementBatch) throws SQLException {
        preparedStatementBatch.setInt(1, someRole.id);
        preparedStatementBatch.setString(2, someRole.description);
        preparedStatementBatch.addBatch();
        preparedStatementBatch.executeBatch();
    }
}
